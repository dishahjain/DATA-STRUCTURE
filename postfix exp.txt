#include<stdio.h>

#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAX 100

char stack[MAX];
int top = -1;


void push(char operator) {
    if (top < MAX - 1) {
        stack[++top] = operator;
    }
}


char pop() {
    if (top >= 0) {
        return stack[top--];
    }
    return '\0'; 
}


int precedence(char operator) {
    switch (operator) {
        case '+':
        case '-':
            return 1;
        case '*':
        case '/':
            return 2;
        default:
            return 0;
    }
}


void infix_to_postfix(const char* infix, char* postfix) {
    int i = 0, j = 0;
    char current;

    while ((current = infix[i++]) != '\0') {
        
        if (isalnum(current)) {
            postfix[j++] = current;
        }
        
        else if (current == '(') {
            push(current);
        }
       
        else if (current == ')') {
            while (top != -1 && stack[top] != '(') {
                postfix[j++] = pop();
            }
            pop(); 
        }
        
        else {
            while (top != -1 && precedence(stack[top]) >= precedence(current)) {
                postfix[j++] = pop();
            }
            push(current);
        }
    }

    
    while (top != -1) {
        postfix[j++] = pop();
    }

    postfix[j] = '\0'; 
}

int main() {
    char infix[MAX], postfix[MAX];

    printf("Enter a valid parenthesized infix expression: ");
    fgets(infix, MAX, stdin);
    infix[strcspn(infix, "\n")] = 0; 

    infix_to_postfix(infix, postfix);
    
    printf("Postfix Expression: %s\n", postfix);
    
    return 0;
}
